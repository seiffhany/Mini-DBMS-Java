/* CCJSqlParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
package net.sf.jsqlparser.parser;
import java.lang.reflect.Field;
import java.lang.Integer;
import net.sf.jsqlparser.parser.feature.*;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.analyze.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.alter.sequence.*;
import net.sf.jsqlparser.statement.comment.*;
import net.sf.jsqlparser.statement.create.function.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.procedure.*;
import net.sf.jsqlparser.statement.create.schema.*;
import net.sf.jsqlparser.statement.create.synonym.*;
import net.sf.jsqlparser.statement.create.sequence.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.show.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import net.sf.jsqlparser.statement.values.*;
import net.sf.jsqlparser.statement.grant.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {
    public FeatureConfiguration configuration = new FeatureConfiguration();

    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6){
   switch (pos)
   {
      case 0:
         if ((active3 & 0xe00000L) != 0L)
         {
            jjmatchedKind = 332;
            return 68;
         }
         if ((active5 & 0x1000000000L) != 0L)
            return 36;
         if ((active5 & 0x30200000000000L) != 0L)
            return 321;
         if ((active0 & 0xffbffcL) != 0L || (active1 & 0xfe1ffffd00000000L) != 0L || (active2 & 0x7ffffffbL) != 0L || (active4 & 0x203fff8000000000L) != 0L || (active6 & 0x8bf0000L) != 0L)
         {
            jjmatchedKind = 332;
            return 51;
         }
         if ((active6 & 0x40L) != 0L)
            return 322;
         if ((active2 & 0xff80000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 133;
         }
         if ((active4 & 0x7c0000000000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 40;
         }
         if ((active6 & 0x8L) != 0L)
            return 312;
         if ((active3 & 0x1fff80L) != 0L)
         {
            jjmatchedKind = 332;
            return 16;
         }
         if ((active5 & 0x8000000000000000L) != 0L)
            return 323;
         if ((active4 & 0x1800000000000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 3;
         }
         if ((active0 & 0x1ffdfffc80000000L) != 0L || (active5 & 0x4000000000L) != 0L || (active6 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 226;
         }
         if ((active2 & 0x4L) != 0L || (active3 & 0xfffdc00000000000L) != 0L || (active4 & 0x170000003fL) != 0L)
         {
            jjmatchedKind = 332;
            return 185;
         }
         if ((active4 & 0x3fefc0L) != 0L || (active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 252;
         }
         if ((active3 & 0x3fffff000000L) != 0L || (active5 & 0x18000000000L) != 0L || (active6 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 320;
         }
         if ((active5 & 0x3081000000000000L) != 0L || (active6 & 0x2L) != 0L)
            return 324;
         if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0x7fffeL) != 0L || (active6 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 142;
         }
         if ((active0 & 0x37f000000L) != 0L || (active1 & 0xfff80000L) != 0L)
         {
            jjmatchedKind = 332;
            return 325;
         }
         if ((active4 & 0x48ffc00000L) != 0L || (active5 & 0x40000000000L) != 0L || (active6 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 326;
         }
         if ((active5 & 0x800000000000L) != 0L || (active6 & 0x4L) != 0L)
            return 327;
         if ((active2 & 0x1fffb0000000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 116;
         }
         if ((active5 & 0xc00000000000000L) != 0L || (active6 & 0xc000L) != 0L)
            return 47;
         if ((active2 & 0xfe00000000000000L) != 0L || (active3 & 0x7eL) != 0L)
         {
            jjmatchedKind = 332;
            return 23;
         }
         if ((active1 & 0x1e0000000000000L) != 0L)
         {
            jjmatchedKind = 332;
            return 6;
         }
         return -1;
      case 1:
         if ((active4 & 0x2000L) != 0L || (active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 251;
         }
         if ((active2 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 137;
         }
         if ((active0 & 0x260380000L) != 0L || (active1 & 0xe20000000000c000L) != 0L || (active2 & 0xbf3ff800000803fbL) != 0L || (active3 & 0x2L) != 0L || (active4 & 0xc000L) != 0L || (active6 & 0x9c0000L) != 0L)
            return 51;
         if ((active3 & 0x30L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 22;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 225;
         }
         if ((active2 & 0xc000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 132;
         }
         if ((active0 & 0x57fdfffd9fc7bffcL) != 0L || (active1 & 0x1cfffffdffff3ffeL) != 0L || (active2 & 0x40c0010ffff7fc04L) != 0L || (active3 & 0xff01ffffffffffccL) != 0L || (active4 & 0x2fffffdffff00ffbL) != 0L || (active6 & 0x1f200000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 51;
         }
         if ((active4 & 0xf0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 272;
         }
         if ((active4 & 0x1000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 2;
         }
         if ((active2 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 115;
         }
         if ((active5 & 0x5c000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return 51;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 141;
         }
         if ((active4 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 196;
         }
         if ((active3 & 0xfc000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 184;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 1;
            }
            return 5;
         }
         return -1;
      case 2:
         if ((active4 & 0x2000L) != 0L || (active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 258;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 328;
         }
         if ((active0 & 0x820a420L) != 0L || (active1 & 0x400078000403800L) != 0L || (active2 & 0xc18000020060000L) != 0L || (active3 & 0xc0300000000000L) != 0L || (active4 & 0x17c00000c0008000L) != 0L)
            return 51;
         if ((active0 & 0x57fdffffd7c71bdcL) != 0L || (active1 & 0xd9fff87dffbf87feL) != 0L || (active2 & 0x61e7f1cfdff1feffL) != 0L || (active3 & 0xff3dcfffffffffceL) != 0L || (active4 & 0x283fffdf3fff0fffL) != 0L || (active6 & 0x1fa00000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 51;
         }
         if ((active3 & 0x30L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 21;
         }
         if ((active2 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 114;
         }
         if ((active2 & 0x3000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 136;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 2;
            }
            return 224;
         }
         return -1;
      case 3:
         if ((active3 & 0x30L) != 0L)
            return 20;
         if ((active2 & 0x20000000000L) != 0L)
            return 113;
         if ((active0 & 0x10f650800000L) != 0L || (active1 & 0x38000c1b00c0L) != 0L || (active2 & 0x60c000001195fc80L) != 0L || (active3 & 0x7184200002000400L) != 0L || (active4 & 0x283e700080240e00L) != 0L || (active6 & 0x200000L) != 0L)
            return 51;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return 223;
         }
         if ((active0 & 0x77fdef0987471bdcL) != 0L || (active1 & 0xd9ffc77df3a4873eL) != 0L || (active2 & 0x937f1efce60027fL) != 0L || (active3 & 0x8e39cffffdfffbceL) != 0L || (active4 & 0x7018fdf3fdb01ffL) != 0L || (active6 & 0x1f800000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return 51;
         }
         if ((active2 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return 135;
         }
         if ((active4 & 0x2000L) != 0L || (active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return 257;
         }
         return -1;
      case 4:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 4;
            }
            return 222;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 4;
            }
            return 19;
         }
         if ((active0 & 0x15002c00c1050800L) != 0L || (active1 & 0x101f013900000000L) != 0L || (active2 & 0x80001986000003L) != 0L || (active3 & 0x8000040881721006L) != 0L || (active4 & 0x8308008001c0L) != 0L)
            return 51;
         if ((active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 4;
            }
            return 256;
         }
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x62fdc3a9064213dcL) != 0L || (active1 & 0xc9e0e644fba487beL) != 0L || (active2 & 0x937f1e64860f27cL) != 0L || (active3 & 0xe39cbf77c8debc8L) != 0L || (active4 & 0x7190cd73f5b283fL) != 0L || (active6 & 0x17800000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 4;
            }
            return 51;
         }
         return -1;
      case 5:
         if ((active0 & 0x60f848a902421340L) != 0L || (active1 & 0xc1cc6240ea04079eL) != 0L || (active2 & 0x3731a74060f074L) != 0L || (active3 & 0xe38cbb53c85eac0L) != 0L || (active4 & 0x5100cc7265b2814L) != 0L || (active6 & 0x17800000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 5;
            }
            return 51;
         }
         if ((active0 & 0x20583000400009cL) != 0L || (active1 & 0x820840411a08020L) != 0L || (active2 & 0x900c04008000208L) != 0L || (active3 & 0x1004240080108L) != 0L || (active4 & 0x2090210190001abL) != 0L)
            return 51;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 5;
            }
            return 208;
         }
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 5;
            }
            return 255;
         }
         if ((active3 & 0x20L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 5;
            }
            return 18;
         }
         return -1;
      case 6:
         if ((active0 & 0x4069420902021140L) != 0L || (active1 & 0x41800200aa000114L) != 0L || (active2 & 0x14310100600000L) != 0L || (active3 & 0x820001420812800L) != 0L || (active4 & 0x4100c0004002014L) != 0L)
            return 51;
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x209008a000400200L) != 0L || (active1 & 0x804c60404004068aL) != 0L || (active2 & 0x2300a64000f074L) != 0L || (active3 & 0x618cba11c04c2e0L) != 0L || (active4 & 0x10000c7225b0900L) != 0L || (active6 & 0x17800000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 6;
            }
            return 51;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 209;
         if ((active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 6;
            }
            return 254;
         }
         return -1;
      case 7:
         if ((active0 & 0x2010002000000000L) != 0L || (active1 & 0x4600040000480L) != 0L || (active2 & 0xa400000040L) != 0L || (active3 & 0x6080981000000e0L) != 0L || (active4 & 0xc0221b0000L) != 0L || (active6 & 0x4000000L) != 0L)
            return 51;
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 7;
            }
            return 253;
         }
         if ((active0 & 0xc0088000400200L) != 0L || (active1 & 0x804800400004020aL) != 0L || (active2 & 0x2300024000f034L) != 0L || (active3 & 0x10c2201c04c200L) != 0L || (active4 & 0x100000700400900L) != 0L || (active6 & 0x13800000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 7;
            }
            return 51;
         }
         return -1;
      case 8:
         if ((active0 & 0xc0080000400000L) != 0L || (active1 & 0x4800000000020aL) != 0L || (active2 & 0x2300024000f014L) != 0L || (active3 & 0x10014000000L) != 0L || (active4 & 0x100000300000100L) != 0L || (active6 & 0x17800000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 8;
            return 51;
         }
         if ((active0 & 0x8000000200L) != 0L || (active1 & 0x8000004000040000L) != 0L || (active2 & 0x20L) != 0L || (active3 & 0x10c2200804c200L) != 0L || (active4 & 0x400400800L) != 0L)
            return 51;
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 8;
            return 262;
         }
         return -1;
      case 9:
         if ((active0 & 0x80080000000000L) != 0L || (active1 & 0x208L) != 0L || (active2 & 0x2300000000c010L) != 0L || (active3 & 0x10014000000L) != 0L || (active4 & 0x100L) != 0L || (active6 & 0x5000000L) != 0L)
            return 51;
         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x48000000000002L) != 0L || (active2 & 0x240003004L) != 0L || (active4 & 0x100000300000000L) != 0L || (active6 & 0x2800000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 9;
            }
            return 51;
         }
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 9;
            }
            return 261;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x48000000000002L) != 0L || (active2 & 0x240008004L) != 0L || (active4 & 0x100000300000000L) != 0L || (active6 & 0x3000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return 51;
         }
         if ((active2 & 0x3000L) != 0L)
            return 51;
         if ((active5 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 10;
            }
            return 329;
         }
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active1 & 0x8000000000000L) != 0L || (active2 & 0x240000000L) != 0L || (active4 & 0x100000200000000L) != 0L)
            return 51;
         if ((active6 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x40000000000002L) != 0L || (active2 & 0xa004L) != 0L || (active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 11;
            return 51;
         }
         return -1;
      case 12:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x40000000000000L) != 0L || (active2 & 0x8004L) != 0L)
            return 51;
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0x2000L) != 0L || (active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 12;
            return 51;
         }
         return -1;
      case 13:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L || (active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 13;
            return 51;
         }
         if ((active1 & 0x2L) != 0L || (active2 & 0x2000L) != 0L)
            return 51;
         return -1;
      case 14:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 51;
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 14;
            return 51;
         }
         return -1;
      case 15:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 15;
            return 51;
         }
         return -1;
      case 16:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 16;
            return 51;
         }
         return -1;
      case 17:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 17;
            return 51;
         }
         return -1;
      case 18:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x100000000L) != 0L)
            return 51;
         return -1;
      case 19:
         if ((active6 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 332;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 365;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x30000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x30000L);
      case 37:
         return jjStopAtPos(0, 388);
      case 38:
         jjmatchedKind = 384;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 353);
      case 41:
         return jjStopAtPos(0, 354);
      case 42:
         return jjStopAtPos(0, 363);
      case 43:
         return jjStopAtPos(0, 366);
      case 44:
         return jjStopAtPos(0, 49);
      case 45:
         jjmatchedKind = 378;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800000000000000L, 0xc000L);
      case 46:
         return jjStartNfaWithStates_0(0, 356, 36);
      case 47:
         return jjStartNfaWithStates_0(0, 387, 312);
      case 58:
         jjmatchedKind = 357;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000000000000000L, 0x1000L);
      case 60:
         jjmatchedKind = 368;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x3080000000000000L, 0x2L);
      case 61:
         jjmatchedKind = 355;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 367;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4L);
      case 63:
         jjmatchedKind = 364;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x300000000000000L, 0x0L);
      case 64:
         jjmatchedKind = 397;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x42000000000000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 390, 322);
      case 93:
         return jjStopAtPos(0, 391);
      case 94:
         return jjStopAtPos(0, 389);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xffbffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x37f000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1ffdfffc80000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x4000000000L, 0x1000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x7fffeL, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff80000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffd00000000L, 0x80000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f800000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe00000000000000L, 0x3fbL, 0x0L, 0x0L, 0x0L, 0x9c0000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfc00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x70000L, 0x0L, 0x0L, 0x0L, 0x8000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7ff00000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xff80000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fffb0000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe00000000000000L, 0x7eL, 0x0L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1fff80L, 0x0L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe00000L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3fffff000000L, 0x0L, 0x18000000000L, 0x4000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L, 0xfffdc00000000000L, 0x170000003fL, 0x0L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fefc0L, 0x20000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x48ffc00000L, 0x40000000000L, 0x10000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1f8000000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x3fe00000000000L, 0x0L, 0x200000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x7c0000000000000L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1800000000000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 406;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xd00L);
      case 124:
         return jjStartNfaWithStates_0(0, 383, 323);
      case 125:
         return jjStopAtPos(0, 393);
      case 126:
         jjmatchedKind = 370;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active5 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 379);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x2000000000000000L, active6, 0L);
      case 38:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active5 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 377);
         break;
      case 42:
         if ((active5 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 371);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000000000L, active6, 0L);
      case 58:
         if ((active6 & 0x1000L) != 0L)
            return jjStopAtPos(1, 396);
         break;
      case 60:
         if ((active6 & 0x2L) != 0L)
            return jjStopAtPos(1, 385);
         break;
      case 61:
         if ((active5 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 382);
         break;
      case 62:
         if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(1, 192);
         else if ((active5 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 374);
         else if ((active6 & 0x4L) != 0L)
            return jjStopAtPos(1, 386);
         else if ((active6 & 0x4000L) != 0L)
         {
            jjmatchedKind = 398;
            jjmatchedPos = 1;
         }
         else if ((active6 & 0x10000L) != 0L)
         {
            jjmatchedKind = 400;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x28000L);
      case 64:
         if ((active5 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 369);
         else if ((active5 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 375);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000007c80000000L, active1, 0x20001000000000L, active2, 0x10780300000L, active3, 0xc00001000780L, active4, 0x8002780000001c0L, active5, 0L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x18L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active6 & 0x100L) != 0L)
            return jjStopAtPos(1, 392);
         return jjMoveStringLiteralDfa2_0(active0, 0xe0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000003000000L, active1, 0x1000000fcL, active2, 0x20800c70000L, active3, 0xfc03ff7e000800L, active4, 0x1000080000000c00L, active5, 0L, active6, 0x4000000L);
      case 70:
      case 102:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 51);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xc00000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f8000000000L, active1, 0L, active2, 0L, active3, 0x300000000000000L, active4, 0xc00000000200L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0x4c0000c00000f00L, active2, 0x3013000000L, active3, 0x1c00040000001000L, active4, 0x1f101000002000L, active5, 0x20000000000L, active6, 0xa200000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000e00L, active1, 0x1000802000080000L, active2, 0L, active3, 0x80002000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x102000L, active2, 0L, active3, 0L, active4, 0x740000000000000L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 147, 51);
         else if ((active2 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xb000L, active1, 0xc000000000600000L, active2, 0x20000000000000fbL, active3, 0L, active4, 0x4027c00000L, active5, 0L, active6, 0x109c0000L);
      case 79:
      case 111:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4000L) != 0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1fdc00010000000L, active1, 0x10007c000008000L, active2, 0x13ff0c06c000400L, active3, 0x4000380000000000L, active4, 0x20a0000000008000L, active5, 0L, active6, 0x1000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0x4000000000000000L, active3, 0x40L, active4, 0x18000000L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x700000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 51);
         else if ((active5 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 51);
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000060000L, active1, 0xf080000010000L, active2, 0L, active3, 0x7c002L, active4, 0xf0000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 51);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 51);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x800000L, active2, 0xfa00L, active3, 0L, active4, 0x8c0000000L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 51);
         else if ((active6 & 0x400L) != 0L)
         {
            jjmatchedKind = 394;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x8000000000000000L, active4, 0x3L, active5, 0L, active6, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000100c00000L, active1, 0x10700000060000L, active2, 0xc0000000000000L, active3, 0xf8000cL, active4, 0x100004L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x30L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xff000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000240000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200030L, active5, 0L, active6, 0L);
      case 124:
         if ((active5 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 376);
         break;
      case 126:
         if ((active5 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 372;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1c0000L);
      case 42:
         if ((active5 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 373);
         break;
      case 62:
         if ((active5 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 380);
         else if ((active5 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(2, 381);
         else if ((active6 & 0x8000L) != 0L)
            return jjStopAtPos(2, 399);
         else if ((active6 & 0x20000L) != 0L)
            return jjStopAtPos(2, 401);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x138000001100L, active1, 0x11000000200002L, active2, 0x400000L, active3, 0x8000000002002000L, active4, 0x10000L, active5, 0L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000080000L, active4, 0x4001c0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000080020000L, active1, 0xc000000003800000L, active2, 0x30000c000000L, active3, 0xc000000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 51);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 51);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000001L, active3, 0x2L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000c0000000000L, active1, 0xc000000L, active2, 0x4000000000010000L, active3, 0x20c030L, active4, 0xd00080000200L, active5, 0L, active6, 0L);
      case 70:
      case 102:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 51);
         else if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0xcL, active2, 0x800000000800000L, active3, 0x400030000000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 157, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000200L, active1, 0x40000000000000L, active2, 0L, active3, 0x40140000000L, active4, 0x1000000000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000010100000L, active2, 0x400L, active3, 0x2000000080c30000L, active4, 0x200801800008L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400001000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 51);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 51);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 51);
         else if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00400000000L, active1, 0x305400000030L, active2, 0x20c0800000000000L, active3, 0x80000000000L, active4, 0x700038702000000L, active5, 0L, active6, 0x8000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000L, active1, 0x20000L, active2, 0x3000002000000L, active3, 0x4804000000000000L, active4, 0x800000000102c00L, active5, 0x20000000000L, active6, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xf0000004000000L, active1, 0x800400000000000L, active2, 0x3010000202L, active3, 0x201000000L, active4, 0x2001000000000010L, active5, 0L, active6, 0x1000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000000000L, active1, 0xe880000010000L, active2, 0x400000000f800L, active3, 0x100000000040000L, active4, 0x1L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 271, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x100000020040000L, active2, 0L, active3, 0x10000400000000L, active4, 0x4200000L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000L, active4, 0x20000000L, active5, 0L, active6, 0x10000000L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 311, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000040000L, active1, 0x70800000000L, active2, 0x800000004L, active3, 0x100b80L, active4, 0x200c0000000002L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active4 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 316, 51);
         else if ((active6 & 0x800L) != 0L)
            return jjStopAtPos(2, 395);
         return jjMoveStringLiteralDfa3_0(active0, 0x100007800000004L, active1, 0x800000000807c0L, active2, 0x100008L, active3, 0x2001f800000000L, active4, 0x4010000024L, active5, 0L, active6, 0x6000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 51);
         else if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000252c00818L, active1, 0x1c0000000L, active2, 0x100103802000f0L, active3, 0x8002000000044cL, active4, 0x1e000000000000L, active5, 0L, active6, 0x200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000008000L, active2, 0L, active3, 0x200000000000000L, active4, 0x60000L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 51);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0x20000000000000L, active2, 0x20008000000000L, active3, 0x800000001000L, active4, 0L, active5, 0L, active6, 0x800000L);
      case 87:
      case 119:
         if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000040000000L, active3, 0x200000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20400000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 51);
         else if ((active2 & 0x20000L) != 0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2L, active2, 0x40000000L, active3, 0L, active4, 0x700080000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000004040040L, active1, 0x800114L, active2, 0x121100004000004L, active3, 0x10000200000080L, active4, 0x200000008000000L, active5, 0L, active6, 0x800000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000208000L, active2, 0L, active3, 0L, active4, 0x80000100000L, active5, 0L, active6, 0x100000L);
      case 67:
      case 99:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc0800000000L, active1, 0x410108000280L, active2, 0x180000000L, active3, 0x44e800L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 217, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L, active4, 0x1000000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 51);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 152, 51);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 252, 51);
         else if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 254, 51);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 274, 51);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 277, 51);
         else if ((active4 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 317, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000804L, active1, 0x20041000028L, active2, 0x40820020007bL, active3, 0x1c00850800106L, active4, 0x10002000L, active5, 0x20000000000L, active6, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000100000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0x1100000L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 51);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 202, 51);
         else if ((active4 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 305;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80420000L, active1, 0x40000000000000L, active2, 0x10000000000000L, active3, 0x40000000000L, active4, 0x1c000000000000L, active5, 0L, active6, 0x200000L);
      case 73:
      case 105:
         if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 242, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000198L, active1, 0x20000000000000L, active2, 0x2004002000000L, active3, 0x800000100000040L, active4, 0xc024010002L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 156, 51);
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 309, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x8000000L, active3, 0x80000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 51);
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 315, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x5000400000011000L, active1, 0x4000204022040000L, active2, 0x80000000000000L, active3, 0x400080400080000L, active4, 0x1c0L, active5, 0L, active6, 0x8000000L);
      case 77:
      case 109:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000L, active1, 0x40000000000L, active2, 0L, active3, 0x10000L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 51);
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 190, 51);
         else if ((active4 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 265, 51);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 302, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x60030000000000L, active1, 0x1000000000000L, active2, 0xf000L, active3, 0L, active4, 0x1800020000L, active5, 0L, active6, 0xc0000L);
      case 79:
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 51);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x800000000000000L, active2, 0x800000000000L, active3, 0x21000L, active4, 0x2c00010L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 51);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 51);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 51);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 253, 51);
         else if ((active4 & 0x400L) != 0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x8L, active4, 0x804L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 287, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x800008000000000L, active1, 0x8010000080000000L, active2, 0x4000000000000L, active3, 0x8000000020200020L, active4, 0x800000000001L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 51);
         else if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 237, 51);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 247, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x480200000000000L, active1, 0x3810000000L, active2, 0x800000000000000L, active3, 0x20000000000000L, active4, 0x100000000000000L, active5, 0L, active6, 0x1000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 51);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 51);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 51);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 51);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 169, 113);
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 301, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x80000400000400L, active2, 0L, active3, 0x200019000000200L, active4, 0x400000000000028L, active5, 0L, active6, 0x6000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0xe000000000000L, active2, 0x11000000200L, active3, 0x8026008000000L, active4, 0x30000000000L, active5, 0L, active6, 0x10000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2400000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 248, 51);
         else if ((active4 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 300, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 189, 51);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0x4000000L, active4, 0x40000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L, active6, 0x8200000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000000L, active2, 0xf000L, active3, 0x400000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000408800000000L, active1, 0x8400a0000000L, active2, 0x2400000000L, active3, 0x1400010000L, active4, 0L, active5, 0L, active6, 0xc0000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x100L, active2, 0L, active3, 0x80000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xb00000000000L, active3, 0x4000000L, active4, 0x5000a0008L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0x200000000000000L, active4, 0x8000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 51);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 51);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 51);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 51);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 51);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 51);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 51);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 212, 51);
         else if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 216, 51);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 223, 51);
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 303, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x868000102000000L, active1, 0x8000000400000000L, active2, 0x800400008000000L, active3, 0x8000020044800L, active4, 0x5000210200001a5L, active5, 0L, active6, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 291, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200004002000000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 51);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 51);
         else if ((active2 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000020000L, active1, 0x100020000040400L, active2, 0x110000000400004L, active3, 0x42000000008a200L, active4, 0x8040000000000L, active5, 0L, active6, 0x10000000L);
      case 75:
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 214, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 154, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x208000L, active2, 0x20000000000200L, active3, 0x8000000000000a0L, active4, 0x110000L, active5, 0L, active6, 0x800000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000L, active1, 0L, active2, 0x8000000000L, active3, 0x1006200000040L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 51);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 279, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x144L, active1, 0x20000040000000L, active2, 0x2000000000000L, active3, 0x100L, active4, 0x200000012L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008L, active1, 0x80004000000200L, active2, 0L, active3, 0L, active4, 0x11080000002800L, active5, 0L, active6, 0x100000L);
      case 80:
      case 112:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000001800000L, active2, 0x40000000L, active3, 0x800000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 51);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 51);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 193, 51);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 194, 51);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 209, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000200L, active1, 0x80000000000008aL, active2, 0x10200200078L, active3, 0x10038018000000L, active4, 0x10000000L, active5, 0L, active6, 0x6000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 51);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 51);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 51);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 164, 51);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 183, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L, active3, 0x100800000L, active4, 0L, active5, 0x20000000000L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 51);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 51);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 51);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 204, 51);
         else if ((active3 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 227, 51);
         else if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 234, 51);
         else if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 255, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000000000L, active1, 0x600010000020L, active2, 0L, active3, 0L, active4, 0x8000000L, active5, 0L, active6, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000a000004L, active2, 0L, active3, 0x8L, active4, 0x1400000L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0x40000000L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 51);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 51);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 213, 51);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 240, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L, active2, 0x1000020c000L, active3, 0x810082000000020L, active4, 0x85000a0000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 211, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x60008000000040L, active1, 0x80040000L, active2, 0L, active3, 0x400400800000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 51);
         else if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 256, 51);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 292, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x4000000042000000L, active2, 0L, active3, 0x44000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 51);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 51);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 51);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 51);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 51);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 51);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 51);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 51);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 225, 51);
         else if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 230, 51);
         else if ((active4 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 280, 51);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 283, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x20002000000L, active1, 0x200000000012L, active2, 0x4008100000000L, active3, 0x10000000L, active4, 0L, active5, 0L, active6, 0x10000000L);
      case 71:
      case 103:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 51);
         else if ((active4 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 257, 51);
         else if ((active4 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 313, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x4L, active3, 0L, active4, 0x2000000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 259, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L, active2, 0x100000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000200L, active1, 0x4400020000080L, active2, 0x20000200000000L, active3, 0x18000000040L, active4, 0x110000L, active5, 0L, active6, 0x6800000L);
      case 75:
      case 107:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 175, 51);
         break;
      case 76:
      case 108:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 51);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x104L, active2, 0x202400000010L, active3, 0x4000080L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active4 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 261, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 51);
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 307, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x809000000000000L, active1, 0x100000000000600L, active2, 0x10000000400000L, active3, 0x408020000002800L, active4, 0x44000400004L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x3000L, active3, 0x220800000000000L, active4, 0x204000000L, active5, 0L, active6, 0x100000L);
      case 80:
      case 112:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 51);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 222, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 82:
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x4080000100400000L, active1, 0x80000000000008L, active2, 0x40000000L, active3, 0x1000010000L, active4, 0x100000000000800L, active5, 0L, active6, 0x1000000L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 51);
         else if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 297, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L, active2, 0x20L, active3, 0x28008000L, active4, 0x80020000100L, active5, 0L, active6, 0x8000000L);
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 51);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 51);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 51);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 51);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 51);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 184, 51);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 187, 51);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 195, 51);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 200, 51);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 284, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x8000000L, active2, 0L, active3, 0x100000200L, active4, 0x4000000000000L, active5, 0x20000000000L, active6, 0xc0000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000002000L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L, active2, 0x3000000000040L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         if ((active4 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 304, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000000000L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 51);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 166, 51);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x200000000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x40008L, active2, 0x3000200000040L, active3, 0x400000000000L, active4, 0x800L, active5, 0x20000000000L, active6, 0x1000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0x3000L, active3, 0x2000000000L, active4, 0L, active5, 0L, active6, 0x2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x8000000000402L, active2, 0L, active3, 0x8098000000000L, active4, 0x420000000L, active5, 0L, active6, 0x4000000L);
      case 68:
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 51);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 160, 51);
         else if ((active4 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 258, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0x400000L, active5, 0L, active6, 0x800000L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 51);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 51);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 51);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 51);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 51);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 51);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 51);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 51);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 51);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 126, 51);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 51);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 173, 51);
         else if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 215, 51);
         else if ((active3 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 226, 51);
         else if ((active4 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 299, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0x8000000040000000L, active2, 0x30L, active3, 0x104000080L, active4, 0x4002000000L, active5, 0L, active6, 0x8000000L);
      case 71:
      case 103:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 51);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 150, 51);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 180, 51);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 205, 51);
         else if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 298, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 221, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x4000000000L, active2, 0x40000000L, active3, 0x82000800c200L, active4, 0x104000000000000L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 149, 51);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0x100000L);
      case 77:
      case 109:
         if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 260, 51);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 51);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 51);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 51);
         else if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 245, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000200L, active2, 0x8000000000L, active3, 0x10000000L, active4, 0x110000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x400000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0x100L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 178, 51);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 251, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0xc000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 51);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 51);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0x10000000L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 51);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 209);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 51);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 51);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 203, 51);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 228, 51);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 269, 51);
         else if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 282, 51);
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 308, 51);
         else if ((active4 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 314, 51);
         return jjMoveStringLiteralDfa7_0(active0, 0x40008000000200L, active1, 0L, active2, 0L, active3, 0x10000000000000L, active4, 0x8000020000L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2400000000L, active3, 0x40000L, active4, 0L, active5, 0L, active6, 0x2c0000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 51);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 208, 51);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20000000000010L, active3, 0L, active4, 0x100000000000100L, active5, 0L, active6, 0x800000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0x4000000L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0x10000000L, active4, 0x300000000L, active5, 0L, active6, 0x10000000L);
      case 68:
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 51);
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 281, 51);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 294, 51);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 51);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 51);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 162, 51);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 165, 51);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 198, 51);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 243, 51);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 273, 51);
         else if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 285, 51);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 295, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0x4000000400000L, active5, 0L, active6, 0x300000L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 114, 51);
         else if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 272, 51);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 276, 51);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80080000000000L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x3000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 235, 51);
         break;
      case 76:
      case 108:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 134, 51);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 199, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x3000200000000L, active3, 0x2000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 51);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 51);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 249, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000004000000000L, active2, 0L, active3, 0x820000004000L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0x40000000L, active3, 0x10000000008200L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 224, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0xc000L, active3, 0x40000L, active4, 0x800L, active5, 0L, active6, 0xc0000L);
      case 83:
      case 115:
         if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 197, 51);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 250, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0L, active5, 0L, active6, 0x8000000L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 51);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 51);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 51);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 167, 51);
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 275, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0x4L, active3, 0x10000000000L, active4, 0L, active5, 0L, active6, 0x4000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0xc000L, active3, 0L, active4, 0x200000000L, active5, 0L, active6, 0x1c0000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x202L, active2, 0L, active3, 0L, active4, 0x100L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 278, 51);
         break;
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 51);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 210, 51);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 219, 51);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 229, 51);
         else if ((active4 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 290, 51);
         else if ((active6 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 332, 51);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x3000L, active3, 0x10010000000L, active4, 0L, active5, 0L, active6, 0x4000000L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 51);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 206, 51);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 233, 51);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0x4000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0x100000000000000L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 51);
         break;
      case 78:
      case 110:
         if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 201, 51);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 207, 51);
         return jjMoveStringLiteralDfa9_0(active0, 0x80080000000000L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x1000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 51);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 244, 51);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 83:
      case 115:
         if ((active4 & 0x4000000000000L) != 0L)
            return jjStopAtPos(8, 306);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8000000L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 51);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 133, 51);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 238, 51);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 239, 51);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x3000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 267, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000L, active2, 0x3000L, active3, 0L, active4, 0x200000000L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x4000000L);
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 51);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 132, 51);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 176, 51);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 177, 51);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 181, 51);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 264, 51);
         else if ((active6 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 332, 51);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x2000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0L, active4, 0x100000000000000L, active5, 0L, active6, 0x8000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0xc0000L);
      case 78:
      case 110:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 218, 51);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 220, 51);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 51);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 51);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000000000L, active6, 0x1000000L);
      case 89:
      case 121:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L, active2, 0x8000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x200000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L, active4, active5, active6);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x43c0000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000L, active2, 0x8000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x2000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L, active2, 0x200000000L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x200000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L, active1, 0x40000000000000L, active2, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4L, active4, 0x100000000L, active5, 0L, active6, 0x8000000L);
      case 83:
      case 115:
         if ((active6 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 332, 51);
         break;
      case 84:
      case 116:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40002000L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         if ((active5 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 63, 329);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L, active4, active5, active6);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L, active4, 0L, active6);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x2000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x2000L, active4, 0L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L, active2, 0L, active4, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 161, 51);
         break;
      case 69:
      case 101:
         if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(11, 289, 51);
         else if ((active4 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 312, 51);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x200000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8000L, active4, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4L, active4, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0xc0000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x100000L);
      case 78:
      case 110:
         if ((active6 & 0x8000000L) != 0L)
            return jjStopAtPos(11, 411);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L, active1, 0L, active2, 0L, active4, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active6, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x4000000L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 115, 51);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active4, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 158, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L, active4, 0L, active6);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0xc0000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x4000000L);
      case 71:
      case 103:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(12, 143, 51);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x2000L, active4, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L, active2, 0L, active4, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 51);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(12, 130, 51);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active6, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x2000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x200000L);
      case 89:
      case 121:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 118, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, 0L, active4, 0L, active6);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x100000000L, active6, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x2000000L);
      case 71:
      case 103:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 141, 51);
         break;
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(13, 65, 51);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0xc0000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L, 0L, active4, 0L, active6);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0x100000000L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x2000000L);
      case 69:
      case 101:
         if ((active6 & 0x100000L) != 0L)
            return jjStopAtPos(14, 404);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0xc0000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x4000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 54, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x4000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x2000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active4, 0x100000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa16_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active6, 0xc0000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active4, 0x100000000L, active6, 0x4000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active6, 0x200000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active6, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa17_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active6, 0x2000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active6, 0xc0000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active6, 0x200000L);
      case 78:
      case 110:
         if ((active6 & 0x4000000L) != 0L)
            return jjStopAtPos(17, 410);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active4, 0x100000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa18_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active6, 0xc0000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active6, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active6, 0x2000000L);
      case 83:
      case 115:
         if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(18, 288, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa19_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active6, 0xc0000L);
      case 78:
      case 110:
         if ((active6 & 0x200000L) != 0L)
            return jjStopAtPos(19, 405);
         break;
      case 89:
      case 121:
         if ((active6 & 0x2000000L) != 0L)
            return jjStopAtPos(19, 409);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa20_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 20;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa21_0(active6, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa21_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active6, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa22_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa23_0(active6, 0xc0000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa23_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active6 & 0x40000L) != 0L)
         {
            jjmatchedKind = 402;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa24_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa25_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 25;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa26_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa26_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa27_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa28_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 28;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa29_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa29_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa30_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 30;
   }
   switch(curChar)
   {
      case 81:
      case 113:
         return jjMoveStringLiteralDfa31_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa31_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 31;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa32_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa33_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 33;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa34_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa34_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa35_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa36_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa37_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa37_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 37;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa38_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa38_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 38;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa39_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa39_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa40_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa41_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 41;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa42_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa42_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 42;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa43_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa43_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 43;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa44_0(active6, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa44_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 44;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active6 & 0x80000L) != 0L)
            return jjStopAtPos(44, 403);
         break;
      default :
         break;
   }
   return jjStartNfa_0(43, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x40220002L, 0xffffffffffffc000L, 0xfffff02fffffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x4a0040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x501f0003ffc3L
};
static final long[] jjbitVec6 = {
   0x0L, 0xbcdf000000000000L, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xfffeffffffffffffL, 0xffffffff027fffffL, 0x1ffL, 0x787ffffff0000L
};
static final long[] jjbitVec9 = {
   0xffffffff00000000L, 0xfffec3ff000007ffL, 0xffffffffffffffffL, 0x9fffc060002fffffL
};
static final long[] jjbitVec10 = {
   0xfffffffd0000L, 0xffffffffffffe000L, 0x2003fffffffffL, 0x43007ffffffffffL
};
static final long[] jjbitVec11 = {
   0x110043fffffL, 0xffff07ff01ffffffL, 0xffffffff00007effL, 0x3ffL
};
static final long[] jjbitVec12 = {
   0x23fffffffffffff0L, 0xfffeffc3ff010000L, 0x23c5fdfffff99fe1L, 0x1003ffc3b0004000L
};
static final long[] jjbitVec13 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbbfe0L, 0x200ffc300010000L
};
static final long[] jjbitVec14 = {
   0x23edfdfffff99fe0L, 0x2ffc3b0000000L, 0x3ffc718d63dc7e8L, 0xffc000010000L
};
static final long[] jjbitVec15 = {
   0x23fffdfffffddfe0L, 0xffc327000000L, 0x23effdfffffddfe1L, 0x6ffc360000000L
};
static final long[] jjbitVec16 = {
   0x27fffffffffddff0L, 0xfc00ffc380704000L, 0x2ffbfffffc7fffe0L, 0xffc00000007fL
};
static final long[] jjbitVec17 = {
   0xdfffffffffffeL, 0x3ff007fL, 0x200dffaffffff7d6L, 0xf3ff005fL
};
static final long[] jjbitVec18 = {
   0x3ff00000001L, 0x1ffffffffeffL, 0x1f00L, 0x0L
};
static final long[] jjbitVec19 = {
   0x800007ffffffffffL, 0xffe1c0623c3f03ffL, 0xffffffff03ff4003L, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec20 = {
   0xffffffffffffffffL, 0xffffffff3d7f3dffL, 0x7f3dffffffff3dffL, 0xffffffffff7fff3dL
};
static final long[] jjbitVec21 = {
   0xffffffffff3dffffL, 0x7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0xffff9fffffffffffL, 0xffffffff07fffffeL, 0x1ffc7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x3ffff8003ffffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x3ff10800000L
};
static final long[] jjbitVec24 = {
   0xffffffff03ff0000L, 0x1ffffffffffffffL, 0xffff05ffffffff9fL, 0x3fffffffffffffL
};
static final long[] jjbitVec25 = {
   0x7fffffffL, 0x1f3fffffffffc0L, 0xffff0fffffffffffL, 0x3ff03ffL
};
static final long[] jjbitVec26 = {
   0xffffffff007fffffL, 0x1fffffL, 0x8003ff03ffL, 0x0L
};
static final long[] jjbitVec27 = {
   0xfffffffffffe0L, 0x3ff1fe0L, 0xffffc001fffffff8L, 0x3fffffffffL
};
static final long[] jjbitVec28 = {
   0xfffffffffL, 0x3fffffffffffe3ffL, 0xe7ffffffffff01ffL, 0x46fde0000000000L
};
static final long[] jjbitVec29 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L
};
static final long[] jjbitVec30 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec31 = {
   0x0L, 0x8002000000000000L, 0x1fff0000L, 0x0L
};
static final long[] jjbitVec32 = {
   0xf3ffbd503e2ffc84L, 0xffffffff000043e0L, 0x1ffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xc781fffffffffL
};
static final long[] jjbitVec34 = {
   0xffff20bfffffffffL, 0x80ffffffffffL, 0x7f7f7f7f007fffffL, 0x7f7f7f7fL
};
static final long[] jjbitVec35 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec37 = {
   0xfffeffffffffffe0L, 0xffffffffffffffffL, 0xffffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec39 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x3fffffffffff0000L
};
static final long[] jjbitVec40 = {
   0xfffffff1fffL, 0x80007fffffffffffL, 0xffffffff3fffffffL, 0xffffffffffffL
};
static final long[] jjbitVec41 = {
   0xfffffffcff800000L, 0xffffffffffffffffL, 0xfffffffffffff9ffL, 0xfffc000003eb07ffL
};
static final long[] jjbitVec42 = {
   0x7fffff7bbL, 0xfffffffffffffL, 0xffffffffffffcL, 0x68fc000003ff0000L
};
static final long[] jjbitVec43 = {
   0xffff003fffffffffL, 0x1fffffff0000007fL, 0x7fffffffffff0L, 0x7fffffdf03ff8000L
};
static final long[] jjbitVec44 = {
   0x1ffffffffffL, 0xc47fffff03ff0ff7L, 0x3e62ffffffffffffL, 0x1c07ff38000005L
};
static final long[] jjbitVec45 = {
   0xffff7f7f007e7e7eL, 0xffff03fff7ffffffL, 0xffffffffffffffffL, 0x3ff0007ffffffffL
};
static final long[] jjbitVec46 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff000fffffffffL, 0xffffffffffff87fL
};
static final long[] jjbitVec47 = {
   0xffffffffffffffffL, 0xffff3fffffffffffL, 0xffffffffffffffffL, 0x3ffffffL
};
static final long[] jjbitVec48 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec49 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec50 = {
   0x0L, 0xffdf000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec51 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec52 = {
   0x60220002L, 0xffffffffffffc000L, 0xfffff02fffffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec53 = {
   0x0L, 0x0L, 0x4a0240000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec54 = {
   0xffffffffffffffffL, 0xbcdfffffffffffffL, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec55 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffcfbL, 0xffffffffffffffffL
};
static final long[] jjbitVec56 = {
   0xfffeffffffffffffL, 0xffffffff027fffffL, 0xbffffffffffe01ffL, 0x787ffffff00b6L
};
static final long[] jjbitVec57 = {
   0xffffffff17ff003fL, 0xffffc3ffffffffffL, 0xffffffffffffffffL, 0x9ffffdffbfefffffL
};
static final long[] jjbitVec58 = {
   0xffffffffffff8000L, 0xffffffffffffe7ffL, 0x3ffffffffffffL, 0x243fffffffffffffL
};
static final long[] jjbitVec59 = {
   0x3fffffffffffL, 0xffff07ff0fffffffL, 0xffffffffff037effL, 0xffffffffffffffffL
};
static final long[] jjbitVec60 = {
   0xffffffffffffffffL, 0xfffeffcfffffffffL, 0xf3c5fdfffff99fefL, 0x5003ffcfb080799fL
};
static final long[] jjbitVec61 = {
   0xd36dfdfffff987eeL, 0x3fffc05e023987L, 0xf3edfdfffffbbfeeL, 0xfe00ffcf00013bbfL
};
static final long[] jjbitVec62 = {
   0xf3edfdfffff99feeL, 0x2ffcfb0e0399fL, 0xc3ffc718d63dc7ecL, 0xffc000813dc7L
};
static final long[] jjbitVec63 = {
   0xf3fffdfffffddfffL, 0xffcf27603ddfL, 0xf3effdfffffddfefL, 0xeffcf60603ddfL
};
static final long[] jjbitVec64 = {
   0xfffffffffffddfffL, 0xfc00ffcf80f07ddfL, 0x2ffbfffffc7fffeeL, 0xcffc0ff5f847fL
};
static final long[] jjbitVec65 = {
   0x7fffffffffffffeL, 0x3ff7fffL, 0x3fffffaffffff7d6L, 0xf3ff7f5fL
};
static final long[] jjbitVec66 = {
   0xc2a003ff03000001L, 0xfffe1ffffffffeffL, 0x1ffffffffeffffdfL, 0x40L
};
static final long[] jjbitVec67 = {
   0xffffffffffffffffL, 0xffffffffffff03ffL, 0xffffffff3fffffffL, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec68 = {
   0xffffffffff3dffffL, 0xe7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec69 = {
   0x1fffff803fffffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff308fffffL
};
static final long[] jjbitVec70 = {
   0xffffffff03fff800L, 0x1ffffffffffffffL, 0xffff07ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec71 = {
   0xfff0fff7fffffffL, 0x1f3fffffffffc0L, 0xffff0fffffffffffL, 0x3ff03ffL
};
static final long[] jjbitVec72 = {
   0xffffffff0fffffffL, 0x9fffffff7fffffffL, 0xbfff008003ff03ffL, 0x7fffL
};
static final long[] jjbitVec73 = {
   0xffffffffffffffffL, 0xff80003ff1fffL, 0xffffffffffffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec74 = {
   0xffffffffffffffL, 0x3fffffffffffe3ffL, 0xe7ffffffffff01ffL, 0x7fffffffff70000L
};
static final long[] jjbitVec75 = {
   0x80007c000000f800L, 0x8002ffdf00100001L, 0x1fff0000L, 0x1ffe21fff0000L
};
static final long[] jjbitVec76 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xff81fffffffffL
};
static final long[] jjbitVec77 = {
   0xffff20bfffffffffL, 0x800080ffffffffffL, 0x7f7f7f7f007fffffL, 0xffffffff7f7f7f7fL
};
static final long[] jjbitVec78 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec79 = {
   0xfffffff1fffL, 0xbff0ffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL
};
static final long[] jjbitVec80 = {
   0x10ffffffffffL, 0xfffffffffffffL, 0xffffffffffffffffL, 0xe8ffffff03ff003fL
};
static final long[] jjbitVec81 = {
   0xffff3fffffffffffL, 0x1fffffff000fffffL, 0xffffffffffffffffL, 0x7fffffff03ff8001L
};
static final long[] jjbitVec82 = {
   0x7fffffffffffffL, 0xfc7fffff03ff3fffL, 0xffffffffffffffffL, 0x7cffff38000007L
};
static final long[] jjbitVec83 = {
   0xffff7f7f007e7e7eL, 0xffff03fff7ffffffL, 0xffffffffffffffffL, 0x3ff37ffffffffffL
};
static final long[] jjbitVec84 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec85 = {
   0x18ffff0000ffffL, 0xffdf00000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec86 = {
   0x87fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0xe0000001cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 321;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 255:
               case 51:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 261:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 254:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 68:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 312:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(314, 315); }
                  else if (curChar == 47)
                  {
                     if (kind > 330)
                        kind = 330;
                     { jjCheckNAdd(48); }
                  }
                  break;
               case 253:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 2:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 19:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 323:
               case 33:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 132:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 320:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 322:
               case 98:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 222:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 141:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 328:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 113:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(118, 126); }
                  break;
               case 137:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 226:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 22:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 5:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 272:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 225:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 135:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 324:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(297, 298); }
                  else if (curChar == 62)
                  {
                     if (kind > 321)
                        kind = 321;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 320)
                        kind = 320;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(295, 296); }
                  break;
               case 329:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 40)
                     { jjCheckNAdd(147); }
                  break;
               case 0:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     { jjAddStates(11, 12); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(13, 16); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(87, 88); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 46)
                     { jjCheckNAdd(36); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(30, 31); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(27, 28); }
                  else if (curChar == 59)
                  {
                     if (kind > 318)
                        kind = 318;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAddStates(17, 23); }
                  }
                  else if (curChar == 10)
                     { jjAddStates(24, 26); }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 20:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 3:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 115:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 325:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 114:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 209:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(244, 243); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(233, 232); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(221, 220); }
                  break;
               case 252:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 116:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 185:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 321:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  else if (curChar == 61)
                  {
                     if (kind > 322)
                        kind = 322;
                  }
                  break;
               case 18:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 224:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 23:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 6:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 184:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 326:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 257:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 40)
                     { jjCheckNAdd(147); }
                  break;
               case 16:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 136:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 251:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 196:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 133:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 21:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 40:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(41); }
                  break;
               case 258:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 223:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 262:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 40)
                     { jjCheckNAdd(147); }
                  break;
               case 208:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 256:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 142:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 327:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  else if (curChar == 61)
                  {
                     if (kind > 319)
                        kind = 319;
                  }
                  break;
               case 25:
                  if (curChar == 59 && kind > 318)
                     kind = 318;
                  break;
               case 26:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 27:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if (curChar == 61 && kind > 319)
                     kind = 319;
                  break;
               case 29:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 30:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 61 && kind > 322)
                     kind = 322;
                  break;
               case 35:
                  if (curChar == 46)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 325)
                     kind = 325;
                  { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 325)
                     kind = 325;
                  { jjCheckNAdd(39); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 42:
                  if (curChar == 39 && kind > 328)
                     kind = 328;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 46:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar != 45)
                     break;
                  if (kind > 330)
                     kind = 330;
                  { jjCheckNAdd(48); }
                  break;
               case 48:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 330)
                     kind = 330;
                  { jjCheckNAdd(48); }
                  break;
               case 49:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 53:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 6); }
                  break;
               case 55:
                  if (curChar == 34)
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 56:
                  if (curChar == 39)
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 58:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 59:
               case 66:
                  if (curChar == 39 && kind > 351)
                     kind = 351;
                  break;
               case 60:
                  if (curChar == 39)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 61:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 65:
                  { jjAddStates(34, 35); }
                  break;
               case 69:
                  if (curChar == 40)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 70:
                  { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 71:
                  if (curChar == 41)
                     { jjCheckNAdd(66); }
                  break;
               case 72:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 74:
                  { jjAddStates(36, 37); }
                  break;
               case 76:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 78:
                  { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if (curChar == 39)
                     { jjCheckNAdd(66); }
                  break;
               case 80:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 81:
                  if (curChar == 56)
                     { jjAddStates(38, 39); }
                  break;
               case 86:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 87:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 88:
                  if (curChar == 34 && kind > 352)
                     kind = 352;
                  break;
               case 89:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(90, 92); }
                  break;
               case 90:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(90, 92); }
                  break;
               case 91:
                  if (curChar == 36 && kind > 352)
                     kind = 352;
                  break;
               case 92:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 95:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(40, 41); }
                  break;
               case 100:
                  if (curChar == 10)
                     { jjAddStates(24, 26); }
                  break;
               case 101:
                  if (curChar == 10 && kind > 318)
                     kind = 318;
                  break;
               case 102:
                  if (curChar == 10)
                     { jjCheckNAdd(101); }
                  break;
               case 103:
                  if (curChar == 47)
                     { jjCheckNAdd(101); }
                  break;
               case 108:
                  if (curChar == 32)
                     { jjAddStates(42, 43); }
                  break;
               case 118:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(118, 126); }
                  break;
               case 120:
                  if (curChar == 32)
                     { jjAddStates(44, 45); }
                  break;
               case 146:
                  if (curChar == 40)
                     { jjCheckNAdd(147); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(147, 148); }
                  break;
               case 148:
                  if (curChar == 41)
                     { jjCheckNAddTwoStates(149, 150); }
                  break;
               case 149:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(149, 150); }
                  break;
               case 152:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(46, 49); }
                  break;
               case 153:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(153, 168); }
                  break;
               case 155:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(155, 164); }
                  break;
               case 157:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(50, 51); }
                  break;
               case 177:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 211:
                  if (curChar == 41 && kind > 268)
                     kind = 268;
                  break;
               case 212:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 221:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(221, 220); }
                  break;
               case 233:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(233, 232); }
                  break;
               case 244:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(244, 243); }
                  break;
               case 294:
                  if (curChar == 60)
                     { jjCheckNAddStates(13, 16); }
                  break;
               case 295:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(295, 296); }
                  break;
               case 296:
                  if (curChar == 61 && kind > 320)
                     kind = 320;
                  break;
               case 297:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(297, 298); }
                  break;
               case 298:
                  if (curChar == 62 && kind > 321)
                     kind = 321;
                  break;
               case 299:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAddStates(17, 23); }
                  break;
               case 300:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(300, 35); }
                  break;
               case 301:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(301, 302); }
                  break;
               case 302:
                  if (curChar != 46)
                     break;
                  if (kind > 325)
                     kind = 325;
                  jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 304:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(305); }
                  break;
               case 305:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 325)
                     kind = 325;
                  { jjCheckNAdd(305); }
                  break;
               case 306:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(306, 307); }
                  break;
               case 308:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(309); }
                  break;
               case 309:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 325)
                     kind = 325;
                  { jjCheckNAdd(309); }
                  break;
               case 310:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(310); }
                  break;
               case 311:
                  if (curChar == 47)
                     { jjAddStates(11, 12); }
                  break;
               case 313:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(314, 315); }
                  break;
               case 314:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(314, 315); }
                  break;
               case 315:
                  if (curChar == 42)
                     { jjCheckNAddStates(52, 54); }
                  break;
               case 316:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(317, 315); }
                  break;
               case 317:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(317, 315); }
                  break;
               case 318:
                  if (curChar == 47 && kind > 331)
                     kind = 331;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 255:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 261:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  if ((0x400000004000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 254:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 68:
               case 51:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 253:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 2:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 19:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 323:
               case 34:
                  if (curChar == 124 && kind > 323)
                     kind = 323;
                  break;
               case 132:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 320:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(58, 61); }
                  else if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 63); }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  break;
               case 322:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  else if (curChar == 93)
                  {
                     if (kind > 352)
                        kind = 352;
                  }
                  break;
               case 222:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 141:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  else if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(140); }
                  break;
               case 328:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 113:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 137:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 226:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 22:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 5:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 272:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 225:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 135:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 329:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(62, 63); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAddTwoStates(98, 99); }
                  else if (curChar == 96)
                     { jjCheckNAdd(95); }
                  else if (curChar == 124)
                     { jjAddStates(64, 65); }
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 63); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(66, 72); }
                  else if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(73, 76); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(77, 81); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(82, 84); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(85, 86); }
                  else if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(58, 61); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(87, 89); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(90, 91); }
                  else if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 20:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 3:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 115:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 325:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(58, 61); }
                  break;
               case 114:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 209:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 243;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 232;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 252:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 116:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(58, 61); }
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 185:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 18:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 293)
                        kind = 293;
                  }
                  break;
               case 224:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 23:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 6:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 184:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 241)
                        kind = 241;
                  }
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 326:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(58, 61); }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  break;
               case 257:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(62, 63); }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 16:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 136:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 251:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(140); }
                  break;
               case 196:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 133:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 21:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 40:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 258:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 257;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 223:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 262:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(62, 63); }
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 208:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(92, 93); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(94, 95); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(96, 97); }
                  break;
               case 256:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 142:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 332)
                        kind = 332;
                     { jjCheckNAdd(51); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 4:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x4000000040000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0x400000004000L & l) != 0L && kind > 293)
                     kind = 293;
                  break;
               case 11:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 32:
                  if (curChar == 124)
                     { jjAddStates(64, 65); }
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(98, 99); }
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(100, 101); }
                  break;
               case 43:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 44:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 328)
                     kind = 328;
                  { jjCheckNAdd(45); }
                  break;
               case 48:
                  if (kind > 330)
                     kind = 330;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 52:
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 63); }
                  break;
               case 54:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 57:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 62:
                  { jjCheckNAddStates(31, 33); }
                  break;
               case 63:
                  if ((0x2000000020000L & l) != 0L)
                     { jjAddStates(58, 61); }
                  break;
               case 64:
                  if (curChar == 123)
                     { jjCheckNAddTwoStates(65, 67); }
                  break;
               case 65:
                  { jjCheckNAddTwoStates(65, 67); }
                  break;
               case 67:
                  if (curChar == 125)
                     { jjCheckNAdd(66); }
                  break;
               case 70:
                  { jjAddStates(102, 103); }
                  break;
               case 73:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 74:
                  { jjCheckNAddTwoStates(74, 75); }
                  break;
               case 75:
                  if (curChar == 93)
                     { jjCheckNAdd(66); }
                  break;
               case 78:
                  { jjAddStates(104, 105); }
                  break;
               case 82:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  { jjAddStates(106, 107); }
                  break;
               case 90:
                  { jjAddStates(108, 109); }
                  break;
               case 94:
                  if (curChar == 96)
                     { jjCheckNAdd(95); }
                  break;
               case 95:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(95, 96); }
                  break;
               case 96:
                  if (curChar == 96 && kind > 352)
                     kind = 352;
                  break;
               case 97:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 98:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 99:
                  if (curChar == 93 && kind > 352)
                     kind = 352;
                  break;
               case 104:
                  if ((0x800000008000L & l) != 0L && kind > 318)
                     kind = 318;
                  break;
               case 105:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(90, 91); }
                  break;
               case 107:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 109:
                  if ((0x4000000040000L & l) != 0L && kind > 170)
                     kind = 170;
                  break;
               case 110:
               case 121:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(109); }
                  break;
               case 111:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 117:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 119:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 124:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(85, 86); }
                  break;
               case 130:
                  if ((0x10000000100L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 131:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 138:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(82, 84); }
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 143:
                  if ((0x200000002000000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 144:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  break;
               case 150:
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(62, 63); }
                  break;
               case 151:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(152); }
                  break;
               case 154:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 156:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 158:
                  if ((0x2000000020L & l) != 0L && kind > 324)
                     kind = 324;
                  break;
               case 159:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 163:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 166:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 170:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(152); }
                  break;
               case 172:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 178:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  break;
               case 179:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(77, 81); }
                  break;
               case 181:
                  if ((0x1000000010L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 182:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 186:
                  if ((0x10000000100000L & l) != 0L && kind > 241)
                     kind = 241;
                  break;
               case 187:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x100000001000L & l) != 0L && kind > 241)
                     kind = 241;
                  break;
               case 192:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x4000000040000L & l) != 0L && kind > 293)
                     kind = 293;
                  break;
               case 194:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 197:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x8000000080L & l) != 0L && kind > 293)
                     kind = 293;
                  break;
               case 199:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(73, 76); }
                  break;
               case 207:
                  if ((0x8000000080000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 210:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  { jjCheckNAdd(212); }
                  break;
               case 213:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 214:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 216:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 217:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 219:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 227:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               case 228:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 229:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 268)
                     kind = 268;
                  { jjCheckNAdd(212); }
                  break;
               case 230:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(229); }
                  break;
               case 231:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 234:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 235:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(92, 93); }
                  break;
               case 240:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 241:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(229); }
                  break;
               case 242:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 245:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 246:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 247:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(66, 72); }
                  break;
               case 259:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 260:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 263:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 269;
                  break;
               case 271:
                  if ((0x200000002000L & l) != 0L && kind > 293)
                     kind = 293;
                  break;
               case 273:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  break;
               case 275:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  break;
               case 277:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 278:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(55, 57); }
                  break;
               case 285:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 303:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(110, 111); }
                  break;
               case 307:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(112, 113); }
                  break;
               case 314:
                  { jjCheckNAddTwoStates(314, 315); }
                  break;
               case 316:
               case 317:
                  { jjCheckNAddTwoStates(317, 315); }
                  break;
               case 319:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(87, 89); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 255:
               case 51:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 261:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 254:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 68:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 253:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 2:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 19:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 132:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 320:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 322:
               case 98:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 222:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 141:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 328:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 113:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 137:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 226:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 272:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 225:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 135:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 329:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 20:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 115:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 325:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 114:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 209:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 252:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 116:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 185:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 224:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 184:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 326:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 257:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 16:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 136:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 251:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 196:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 133:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 21:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 40:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 258:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 223:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 262:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 208:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 256:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 142:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 332)
                     kind = 332;
                  { jjCheckNAdd(51); }
                  break;
               case 48:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 330)
                     kind = 330;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 58:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(27, 30); }
                  break;
               case 62:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(31, 33); }
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(34, 35); }
                  break;
               case 70:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(102, 103); }
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(36, 37); }
                  break;
               case 78:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(104, 105); }
                  break;
               case 87:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(106, 107); }
                  break;
               case 90:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(108, 109); }
                  break;
               case 95:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(40, 41); }
                  break;
               case 314:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(314, 315); }
                  break;
               case 316:
               case 317:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(317, 315); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 321 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\46\46", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\54", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\75\76", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\75", "\56", "\72", null, null, 
null, null, null, "\52", "\77", "\41", "\53", "\76", "\74", "\100\100", "\176", 
"\176\52", "\41\176", "\41\176\52", "\100\76", "\74\100", "\77\174", "\77\46", "\55", 
"\55\43", "\74\55\76", "\74\43\76", "\72\75", "\174", "\46", "\74\74", "\76\76", "\57", 
"\45", "\136", "\133", "\135", null, "\175", null, null, "\72\72", "\100", "\55\76", 
"\55\76\76", "\43\76", "\43\76\76", null, null, null, null, "\173", null, null, null, null, 
null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   54, 57, 58, 59, 61, 62, 59, 146, 149, 150, 177, 312, 313, 295, 296, 297, 
   298, 300, 35, 301, 302, 306, 307, 310, 102, 103, 105, 54, 57, 58, 59, 61, 
   62, 59, 65, 67, 74, 75, 53, 63, 95, 96, 108, 111, 120, 122, 153, 168, 
   155, 164, 157, 161, 315, 316, 318, 146, 150, 177, 68, 72, 76, 80, 170, 176, 
   33, 34, 252, 260, 270, 273, 275, 283, 293, 207, 226, 238, 249, 185, 190, 192, 
   197, 205, 142, 144, 179, 133, 138, 207, 8, 320, 116, 128, 240, 244, 228, 233, 
   209, 221, 38, 39, 41, 42, 70, 71, 78, 79, 87, 88, 90, 92, 304, 305, 
   308, 309, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec51[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec70[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec72[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec86[i2] & l2) != 0L);
      default :
         if ((jjbitVec52[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 351 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        // <S_CHAR_LITERAL> contains the <SPECIAL_ESC> token and always the longest match is returned
        // So when Backslash is explicitly not allowed as an Escape Character and a <S_CHAR_LITERAL> is found
        // which contains the <SPECIAL_ESC>, then we will need to
        // 1) break the <S_CHAR_LITERAL> at <SPECIAL_ESC> close it with a "'"
        // 2) continue tokenizing after that <SPECIAL_ESC> with a new <S_CHAR_LITERAL> or any other Token
        if ( !configuration.getAsBoolean(Feature.allowBackslashEscapeCharacter) && matchedToken.image.contains("\\'") ) {
            matchedToken.image = image.substring( 0, image.indexOf("\\'") + 1 ) + "'";
            for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
              if ( CCJSqlParserConstants.tokenImage[i].equals("<S_CHAR_LITERAL>") ) {
                  matchedToken.kind = i;
              }
            }
            input_stream.backup(image.length() - matchedToken.image.length() );
        }
         break;
      case 352 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if ( !configuration.getAsBoolean(Feature.allowSquareBracketQuotation) && matchedToken.image.charAt(0) == '[' ) {
            matchedToken.image = "[";
            for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
                if (CCJSqlParserConstants.tokenImage[i].equals("\"[\"")) {
                    matchedToken.kind = i;
                }
            }
            input_stream.backup(image.length() - 1);
        }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 321; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xffffffff8000117fL, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0xc00L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0xc00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[321];
    private final int[] jjstateSet = new int[2 * 321];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
